// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_List = require("rescript/lib/js/belt_List.js");

function getNum(myType) {
  if (myType.TAG === /* NumV */0) {
    return myType._0;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function isNum(x) {
  if (x.TAG === /* NumV */0) {
    return true;
  } else {
    return false;
  }
}

var Value = {
  getNum: getNum,
  isNum: isNum
};

function fdCarg(fd) {
  if (fd.TAG !== /* NumV */0) {
    return fd._1;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function fdCbody(fd) {
  if (fd.TAG !== /* NumV */0) {
    return fd._2;
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function lookup(n, _env) {
  while(true) {
    var env = _env;
    if (env) {
      var a = env.hd;
      if (a._0 === n) {
        return a._1;
      }
      _env = env.tl;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function numPlus(l, r) {
  if (isNum(l) && isNum(r)) {
    return {
            TAG: /* NumV */0,
            _0: getNum(l) + getNum(r) | 0
          };
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function numMult(l, r) {
  if (isNum(l) && isNum(r)) {
    return {
            TAG: /* NumV */0,
            _0: Math.imul(getNum(l), getNum(r))
          };
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function interp(_exp, _env) {
  while(true) {
    var env = _env;
    var exp = _exp;
    switch (exp.TAG | 0) {
      case /* NumC */0 :
          return {
                  TAG: /* NumV */0,
                  _0: exp._0
                };
      case /* IdC */1 :
          return lookup(exp._0, env);
      case /* FdC */2 :
          return {
                  TAG: /* FunV */1,
                  _0: exp._0,
                  _1: exp._1,
                  _2: exp._2
                };
      case /* AppC */3 :
          var fd = interp(exp._0, env);
          _env = Belt_List.add(/* [] */0, /* Bind */{
                _0: fdCarg(fd),
                _1: interp(exp._1, env)
              });
          _exp = fdCbody(fd);
          continue ;
      case /* PlusC */4 :
          return numPlus(interp(exp._0, env), interp(exp._1, env));
      case /* MultC */5 :
          return numMult(interp(exp._0, env), interp(exp._1, env));
      
    }
  };
}

function desugar(ars) {
  switch (ars.TAG | 0) {
    case /* NumS */0 :
        return {
                TAG: /* NumC */0,
                _0: ars._0
              };
    case /* PlusS */1 :
        return {
                TAG: /* PlusC */4,
                _0: desugar(ars._0),
                _1: desugar(ars._1)
              };
    case /* MultS */2 :
        return {
                TAG: /* MultC */5,
                _0: desugar(ars._0),
                _1: desugar(ars._1)
              };
    case /* MinusS */3 :
        return {
                TAG: /* PlusC */4,
                _0: desugar(ars._0),
                _1: {
                  TAG: /* MultC */5,
                  _0: {
                    TAG: /* NumC */0,
                    _0: -1
                  },
                  _1: desugar(ars._1)
                }
              };
    case /* SquareS */4 :
        var l = ars._0;
        return {
                TAG: /* PlusC */4,
                _0: desugar(l),
                _1: desugar(l)
              };
    
  }
}

var an = interp({
      TAG: /* PlusC */4,
      _0: {
        TAG: /* MultC */5,
        _0: {
          TAG: /* AppC */3,
          _0: {
            TAG: /* FdC */2,
            _0: "double",
            _1: "x",
            _2: {
              TAG: /* PlusC */4,
              _0: {
                TAG: /* IdC */1,
                _0: "x"
              },
              _1: {
                TAG: /* NumC */0,
                _0: 5
              }
            }
          },
          _1: {
            TAG: /* NumC */0,
            _0: 2
          }
        },
        _1: {
          TAG: /* NumC */0,
          _0: 4
        }
      },
      _1: {
        TAG: /* NumC */0,
        _0: 3
      }
    }, /* [] */0);

console.log(getNum(an));

var an1 = interp(desugar({
          TAG: /* PlusS */1,
          _0: {
            TAG: /* SquareS */4,
            _0: {
              TAG: /* NumS */0,
              _0: 8
            }
          },
          _1: {
            TAG: /* NumS */0,
            _0: 3
          }
        }), /* [] */0);

var mtEnv = /* [] */0;

var extendEnv = Belt_List.add;

var fd1 = {
  TAG: /* FdC */2,
  _0: "double",
  _1: "x",
  _2: {
    TAG: /* PlusC */4,
    _0: {
      TAG: /* IdC */1,
      _0: "x"
    },
    _1: {
      TAG: /* NumC */0,
      _0: 5
    }
  }
};

var fd2 = {
  TAG: /* FdC */2,
  _0: "quad",
  _1: "x",
  _2: {
    TAG: /* AppC */3,
    _0: {
      TAG: /* FdC */2,
      _0: "double",
      _1: "x",
      _2: {
        TAG: /* PlusC */4,
        _0: {
          TAG: /* IdC */1,
          _0: "x"
        },
        _1: {
          TAG: /* NumC */0,
          _0: 5
        }
      }
    },
    _1: {
      TAG: /* NumC */0,
      _0: 5
    }
  }
};

var fd3 = {
  TAG: /* FdC */2,
  _0: "const5",
  _1: "_",
  _2: {
    TAG: /* NumC */0,
    _0: 5
  }
};

exports.Value = Value;
exports.fdCarg = fdCarg;
exports.fdCbody = fdCbody;
exports.mtEnv = mtEnv;
exports.extendEnv = extendEnv;
exports.lookup = lookup;
exports.numPlus = numPlus;
exports.numMult = numMult;
exports.interp = interp;
exports.desugar = desugar;
exports.fd1 = fd1;
exports.fd2 = fd2;
exports.fd3 = fd3;
exports.an = an;
exports.an1 = an1;
/* an Not a pure module */
