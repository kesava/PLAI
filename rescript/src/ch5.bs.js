// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function getFunDef(f, _fds) {
  while(true) {
    var fds = _fds;
    if (fds) {
      var a = fds.hd;
      if (f === a._0) {
        return a;
      }
      _fds = fds.tl;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function fdCarg(fd) {
  return fd._1;
}

function fdCbody(fd) {
  return fd._2;
}

function subst(wat, forr, inn) {
  switch (inn.TAG | 0) {
    case /* NumC */0 :
        return inn;
    case /* IdC */1 :
        if (inn._0 === forr) {
          return wat;
        } else {
          return inn;
        }
    case /* AppC */2 :
        return {
                TAG: /* AppC */2,
                _0: inn._0,
                _1: subst(wat, forr, inn._1)
              };
    case /* PlusC */3 :
        return {
                TAG: /* PlusC */3,
                _0: subst(wat, forr, inn._0),
                _1: subst(wat, forr, inn._1)
              };
    case /* MultC */4 :
        return {
                TAG: /* MultC */4,
                _0: subst(wat, forr, inn._0),
                _1: subst(wat, forr, inn._1)
              };
    case /* IfCondC */5 :
        return {
                TAG: /* IfCondC */5,
                _0: subst(wat, forr, inn._0),
                _1: subst(wat, forr, inn._1),
                _2: subst(wat, forr, inn._2)
              };
    
  }
}

function interp(_exp, fds) {
  while(true) {
    var exp = _exp;
    switch (exp.TAG | 0) {
      case /* NumC */0 :
          return exp._0;
      case /* IdC */1 :
          throw {
                RE_EXN_ID: "Not_found",
                Error: new Error()
              };
      case /* AppC */2 :
          var fd = getFunDef(exp._0, fds);
          _exp = subst(exp._1, fdCarg(fd), fdCbody(fd));
          continue ;
      case /* PlusC */3 :
          return interp(exp._0, fds) + interp(exp._1, fds) | 0;
      case /* MultC */4 :
          return Math.imul(interp(exp._0, fds), interp(exp._1, fds));
      case /* IfCondC */5 :
          if (interp(exp._0, fds) === 0) {
            _exp = exp._2;
            continue ;
          }
          _exp = exp._1;
          continue ;
      
    }
  };
}

function desugar(ars) {
  switch (ars.TAG | 0) {
    case /* NumS */0 :
        return {
                TAG: /* NumC */0,
                _0: ars._0
              };
    case /* PlusS */1 :
        return {
                TAG: /* PlusC */3,
                _0: desugar(ars._0),
                _1: desugar(ars._1)
              };
    case /* MultS */2 :
        return {
                TAG: /* MultC */4,
                _0: desugar(ars._0),
                _1: desugar(ars._1)
              };
    case /* MinusS */3 :
        return {
                TAG: /* PlusC */3,
                _0: desugar(ars._0),
                _1: {
                  TAG: /* MultC */4,
                  _0: {
                    TAG: /* NumC */0,
                    _0: -1
                  },
                  _1: desugar(ars._1)
                }
              };
    case /* SquareS */4 :
        var l = ars._0;
        return {
                TAG: /* PlusC */3,
                _0: desugar(l),
                _1: desugar(l)
              };
    case /* IfCondS */5 :
        return {
                TAG: /* IfCondC */5,
                _0: desugar(ars._0),
                _1: desugar(ars._1),
                _2: desugar(ars._2)
              };
    
  }
}

var fd1 = /* FdC */{
  _0: "double",
  _1: "x",
  _2: {
    TAG: /* PlusC */3,
    _0: {
      TAG: /* IdC */1,
      _0: "x"
    },
    _1: {
      TAG: /* NumC */0,
      _0: 5
    }
  }
};

var fd2 = /* FdC */{
  _0: "quad",
  _1: "x",
  _2: {
    TAG: /* AppC */2,
    _0: "double",
    _1: {
      TAG: /* AppC */2,
      _0: "double",
      _1: {
        TAG: /* IdC */1,
        _0: "x"
      }
    }
  }
};

var fd3 = /* FdC */{
  _0: "const5",
  _1: "_",
  _2: {
    TAG: /* NumC */0,
    _0: 5
  }
};

var an = interp({
      TAG: /* PlusC */3,
      _0: {
        TAG: /* MultC */4,
        _0: {
          TAG: /* AppC */2,
          _0: "double",
          _1: {
            TAG: /* NumC */0,
            _0: 2
          }
        },
        _1: {
          TAG: /* NumC */0,
          _0: 4
        }
      },
      _1: {
        TAG: /* NumC */0,
        _0: 3
      }
    }, {
      hd: fd1,
      tl: {
        hd: fd2,
        tl: {
          hd: fd3,
          tl: /* [] */0
        }
      }
    });

console.log(an);

var an1 = interp(desugar({
          TAG: /* PlusS */1,
          _0: {
            TAG: /* SquareS */4,
            _0: {
              TAG: /* NumS */0,
              _0: 8
            }
          },
          _1: {
            TAG: /* NumS */0,
            _0: 3
          }
        }), {
      hd: fd1,
      tl: {
        hd: fd2,
        tl: {
          hd: fd3,
          tl: /* [] */0
        }
      }
    });

exports.getFunDef = getFunDef;
exports.fdCarg = fdCarg;
exports.fdCbody = fdCbody;
exports.subst = subst;
exports.interp = interp;
exports.desugar = desugar;
exports.fd1 = fd1;
exports.fd2 = fd2;
exports.fd3 = fd3;
exports.an = an;
exports.an1 = an1;
/* an Not a pure module */
