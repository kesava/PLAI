// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_List = require("rescript/lib/js/belt_List.js");

function getFunDef(f, _fds) {
  while(true) {
    var fds = _fds;
    if (fds) {
      var a = fds.hd;
      if (f === a._0) {
        return a;
      }
      _fds = fds.tl;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function fdCparams(fd) {
  return fd._1;
}

function fdCbody(fd) {
  return fd._2;
}

function lookup(n, _env) {
  while(true) {
    var env = _env;
    if (env) {
      var a = env.hd;
      if (a._0 === n) {
        return a._1;
      }
      _env = env.tl;
      continue ;
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
}

function extendEnvParamsArgs(params, args, env, fds) {
  if (args) {
    return Belt_List.add(extendEnvParamsArgs(Belt_List.tailExn(params), args.tl, env, fds), /* Bind */{
                _0: Belt_List.headExn(params),
                _1: interp(args.hd, env, fds)
              });
  } else {
    return env;
  }
}

function interp(_exp, _env, fds) {
  while(true) {
    var env = _env;
    var exp = _exp;
    switch (exp.TAG | 0) {
      case /* NumC */0 :
          return exp._0;
      case /* IdC */1 :
          return lookup(exp._0, env);
      case /* AppC */2 :
          var fd = getFunDef(exp._0, fds);
          _env = extendEnvParamsArgs(fdCparams(fd), exp._1, env, fds);
          _exp = fdCbody(fd);
          continue ;
      case /* PlusC */3 :
          return interp(exp._0, env, fds) + interp(exp._1, env, fds) | 0;
      case /* MultC */4 :
          return Math.imul(interp(exp._0, env, fds), interp(exp._1, env, fds));
      case /* IfCondC */5 :
          if (interp(exp._0, env, fds) === 0) {
            _exp = exp._2;
            continue ;
          }
          _exp = exp._1;
          continue ;
      
    }
  };
}

function desugar(ars) {
  switch (ars.TAG | 0) {
    case /* NumS */0 :
        return {
                TAG: /* NumC */0,
                _0: ars._0
              };
    case /* PlusS */1 :
        return {
                TAG: /* PlusC */3,
                _0: desugar(ars._0),
                _1: desugar(ars._1)
              };
    case /* MultS */2 :
        return {
                TAG: /* MultC */4,
                _0: desugar(ars._0),
                _1: desugar(ars._1)
              };
    case /* MinusS */3 :
        return {
                TAG: /* PlusC */3,
                _0: desugar(ars._0),
                _1: {
                  TAG: /* MultC */4,
                  _0: {
                    TAG: /* NumC */0,
                    _0: -1
                  },
                  _1: desugar(ars._1)
                }
              };
    case /* SquareS */4 :
        var l = ars._0;
        return {
                TAG: /* PlusC */3,
                _0: desugar(l),
                _1: desugar(l)
              };
    case /* IfCondS */5 :
        return {
                TAG: /* IfCondC */5,
                _0: desugar(ars._0),
                _1: desugar(ars._1),
                _2: desugar(ars._2)
              };
    
  }
}

var fd1 = /* FdC */{
  _0: "double",
  _1: {
    hd: "x",
    tl: /* [] */0
  },
  _2: {
    TAG: /* PlusC */3,
    _0: {
      TAG: /* IdC */1,
      _0: "x"
    },
    _1: {
      TAG: /* NumC */0,
      _0: 5
    }
  }
};

var fd2 = /* FdC */{
  _0: "quad",
  _1: {
    hd: "x",
    tl: /* [] */0
  },
  _2: {
    TAG: /* AppC */2,
    _0: "double",
    _1: {
      hd: {
        TAG: /* AppC */2,
        _0: "double",
        _1: {
          hd: {
            TAG: /* IdC */1,
            _0: "x"
          },
          tl: /* [] */0
        }
      },
      tl: /* [] */0
    }
  }
};

var fd3 = /* FdC */{
  _0: "const5",
  _1: {
    hd: "_",
    tl: /* [] */0
  },
  _2: {
    TAG: /* NumC */0,
    _0: 5
  }
};

var fd4 = /* FdC */{
  _0: "add",
  _1: {
    hd: "x",
    tl: {
      hd: "y",
      tl: /* [] */0
    }
  },
  _2: {
    TAG: /* PlusC */3,
    _0: {
      TAG: /* IdC */1,
      _0: "x"
    },
    _1: {
      TAG: /* IdC */1,
      _0: "y"
    }
  }
};

var an = interp({
      TAG: /* PlusC */3,
      _0: {
        TAG: /* MultC */4,
        _0: {
          TAG: /* AppC */2,
          _0: "double",
          _1: {
            hd: {
              TAG: /* NumC */0,
              _0: 2
            },
            tl: /* [] */0
          }
        },
        _1: {
          TAG: /* NumC */0,
          _0: 4
        }
      },
      _1: {
        TAG: /* NumC */0,
        _0: 3
      }
    }, /* [] */0, {
      hd: fd1,
      tl: {
        hd: fd2,
        tl: {
          hd: fd3,
          tl: /* [] */0
        }
      }
    });

console.log(an);

var an1 = interp({
      TAG: /* PlusC */3,
      _0: {
        TAG: /* MultC */4,
        _0: {
          TAG: /* AppC */2,
          _0: "add",
          _1: {
            hd: {
              TAG: /* NumC */0,
              _0: 2
            },
            tl: {
              hd: {
                TAG: /* NumC */0,
                _0: 8
              },
              tl: /* [] */0
            }
          }
        },
        _1: {
          TAG: /* NumC */0,
          _0: 4
        }
      },
      _1: {
        TAG: /* NumC */0,
        _0: 3
      }
    }, /* [] */0, {
      hd: fd1,
      tl: {
        hd: fd2,
        tl: {
          hd: fd3,
          tl: {
            hd: fd4,
            tl: /* [] */0
          }
        }
      }
    });

console.log(an1);

var an2 = interp(desugar({
          TAG: /* PlusS */1,
          _0: {
            TAG: /* SquareS */4,
            _0: {
              TAG: /* NumS */0,
              _0: 8
            }
          },
          _1: {
            TAG: /* NumS */0,
            _0: 3
          }
        }), /* [] */0, {
      hd: fd1,
      tl: {
        hd: fd2,
        tl: {
          hd: fd3,
          tl: /* [] */0
        }
      }
    });

var mtEnv = /* [] */0;

var extendEnv = Belt_List.add;

exports.getFunDef = getFunDef;
exports.fdCparams = fdCparams;
exports.fdCbody = fdCbody;
exports.mtEnv = mtEnv;
exports.extendEnv = extendEnv;
exports.lookup = lookup;
exports.extendEnvParamsArgs = extendEnvParamsArgs;
exports.interp = interp;
exports.desugar = desugar;
exports.fd1 = fd1;
exports.fd2 = fd2;
exports.fd3 = fd3;
exports.fd4 = fd4;
exports.an = an;
exports.an1 = an1;
exports.an2 = an2;
/* an Not a pure module */
